{"version":3,"sources":["App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Div","styled","minHeight","background","centerItem","mx","maxWidth","App","useState","items","setItems","item","setItem","count","setCount","database","firestore","db_items","useEffect","snapshot","val","addItem","a","newItemRef","deleteItem","id","updated_items","sh_items","Object","keys","map","index","Box","sx","pt","Card","display","flexDirection","backgroundColor","pl","pr","flex","alignItems","Button","onClick","selectItems","Array","fill","_","i","MenuItem","value","className","padding","TextField","variant","fullWidth","onChange","e","target","px","FormControl","InputLabel","Select","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.aca493fe.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport './App.css';\n\nimport {\n\tCard, \n\tButton, \n\tBox, \n\tTextField,\n\tInputLabel,\n\tMenuItem,\n\tFormControl,\n\tSelect\n} from '@material-ui/core';\nimport {styled} from '@material-ui/core/styles';\n\nimport { initializeApp } from \"firebase/app\";\nimport * as firestore from \"firebase/database\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBXuJ0BfOlQslWF1tkThjzZ5v4RqN0RdeE\",\n  authDomain: \"shoppinglist-41e9d.firebaseapp.com\",\n  databaseURL: \"https://shoppinglist-41e9d-default-rtdb.europe-west1.firebasedatabase.app\",\n  projectId: \"shoppinglist-41e9d\",\n  storageBucket: \"shoppinglist-41e9d.appspot.com\",\n  messagingSenderId: \"254143258083\",\n  appId: \"1:254143258083:web:0faf37266fff7fa5aa54d6\",\n  measurementId: \"G-MS3LGTG5ML\"\n};\n\n// Initialize Firebase\ninitializeApp(firebaseConfig);\n\nconst Div = styled('div')({\n\tminHeight: '100vh',\n\tbackground: 'linear-gradient(45deg, green 30%, lawngreen 90%)'\n});\n\nconst centerItem = {mx: 'auto', maxWidth: 400};\n\nfunction App() {\n\tconst [items, setItems] = useState([]);\n\t\n\tconst [item, setItem] = useState(\"\");\n\tconst [count, setCount] = useState(1);\n\t\n\tconst database = firestore.getDatabase();\n\tconst db_items = firestore.ref(database, \"Items\");\n\t\n\tuseEffect(() => {\n\t\tfirestore.onValue(db_items, snapshot => {\n\t\t\tsetItems(snapshot.val());\n\t\t});\n\t}, []);\n\t\n\tconst addItem = async () => {\n\t\tif (!item) return;\n\t\t\n\t\tconst newItemRef = firestore.push(db_items);\n\t\tfirestore.set(newItemRef, {item: item, count: count});\n\t\t\n\t\tsetItem(\"\");\n\t\tsetCount(1);\n\t}\n\t\n\tconst deleteItem = async id => {\n\t\tconst updated_items = items;\n\t\tdelete updated_items[id];\n\t\tfirestore.set(db_items, updated_items);\n\t}\n\t\n\tlet sh_items = \"\";\n\tif (items)\n\t\tsh_items = Object.keys(items).map((id, index) => {\n\t\t\tconst {item, count} = items[id];\n\t\t\treturn (\n\t\t\t\t<Box key={index} sx={{pt:1, ...centerItem}}>\n\t\t\t\t\t<Card>\n\t\t\t\t\t\t<Box sx={{display: 'flex', flexDirection: 'row', backgroundColor:'#90EE90', pl:2, pr:2}}>\n\t\t\t\t\t\t\t<Box sx={{display: 'flex', flex: 1, alignItems: 'left'}}>\n\t\t\t\t\t\t\t\t<p><strong>{item} {count}</strong></p>\n\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t<Button onClick={() => deleteItem(id)}>x</Button>\n\t\t\t\t\t\t</Box>\n\t\t\t\t\t</Card>\n\t\t\t\t</Box>\n\t\t\t);\n\t\t});\n\t\n\tconst selectItems = Array(5).fill().map((_, i) => (\n\t\t<MenuItem key={i} value={i+1}>{i+1}</MenuItem>\n\t));\n\t\n\treturn (\n\t\t<Div className=\"App\">\n\t\t\t<Box sx={{padding: 25}}>\n\t\t\t\t<h1>Shopping list</h1>\n\t\t\t\t<Box sx={{display: 'flex', flexDirection: 'horizontal', ...centerItem}}>\n\t\t\t\t\t<TextField\n\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\tvalue={item}\n\t\t\t\t\t\tonChange={e => setItem(e.target.value)} />\n\t\t\t\t\t<Box sx={{px:1}}>\n\t\t\t\t\t\t<FormControl variant=\"standard\">\n\t\t\t\t\t\t\t<InputLabel>Count</InputLabel>\n\t\t\t\t\t\t\t<Select value={count} onChange={e => setCount(e.target.value)}>\n\t\t\t\t\t\t\t\t{selectItems}\n\t\t\t\t\t\t\t</Select>\n\t\t\t\t\t\t</FormControl>\n\t\t\t\t\t</Box>\n\t\t\t\t\t<Button onClick={addItem}>add</Button>\n\t\t\t\t</Box>\n\t\t\t\t{sh_items}\n\t\t\t</Box>\n\t\t</Div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
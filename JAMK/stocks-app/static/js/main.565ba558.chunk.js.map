{"version":3,"sources":["App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["App","React","useState","data","setData","Option","Select","className","defaultValue","style","width","onChange","symbol","url","axios","get","then","res","count","Object","keys","forEach","key","push","value","height","ResponsiveContainer","LineChart","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","domain","Tooltip","Legend","Line","type","stroke","activeDot","r","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.565ba558.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport {Select} from 'antd';\nimport 'antd/dist/antd.css';\n\nimport axios from 'axios';\n\nimport {\n\tLineChart,\n\tLine,\n\tXAxis,\n\tYAxis,\n\tCartesianGrid,\n\tTooltip,\n\tLegend,\n\tResponsiveContainer\n} from 'recharts';\n\nfunction App() {\n\tconst [data, setData] = React.useState([]);\n\tconst {Option} = Select;\n\t\n\tconst loadStock = (symbol) => {\n\t\tconst URL_PATH = 'https://programmer314.github.io/JAMK/stocks-json/';\n\t\tconst url = URL_PATH + symbol + '.json';\n\t\t\n\t\t// const API_KEY = 'S59TP1B8C31IJKEA'\n\t\t// const URL_PATH = 'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY';\n\t\t// const url = URL_PATH + '&symbol='+symbol+'&apikey='+API_KEY;\n\t\t\n\t\taxios.get(url).then(res => {\n\t\t\tvar data = [];\n\t\t\tvar countMAX = 10;\n\t\t\tvar count = 0;\n\t\t\tObject.keys(res.data[\"Time Series (Daily)\"]).forEach(function(key) {\n\t\t\t\tcount++;\n\t\t\t\tif (count < countMAX) {\n\t\t\t\t\tdata.push({\n\t\t\t\t\t\t'date': key,\n\t\t\t\t\t\t'open': res.data[\"Time Series (Daily)\"][key][\"1. open\"],\n\t\t\t\t\t\t'high': res.data[\"Time Series (Daily)\"][key][\"2. high\"],\n\t\t\t\t\t\t'low': res.data[\"Time Series (Daily)\"][key][\"3. low\"],\n\t\t\t\t\t\t'close': res.data[\"Time Series (Daily)\"][key][\"4. close\"],\n\t\t\t\t\t\t'volume': res.data[\"Time Series (Daily)\"][key][\"5. volume\"]\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t\tsetData(data);\n\t\t})\n\t}\n\t\n\t//function handleChange(value) {\n\t//\tconsole.log(`selected ${value}`);\n\t//}\n\t\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<h1>Stock - Time Series</h1>\n\t\t\t<Select defaultValue=\"AAPL\" style={{width: 120}} onChange={loadStock}>\n\t\t\t\t<Option value=\"AAPL\">Apple</Option>\n\t\t\t\t<Option value=\"AMZN\">Amazon</Option>\n\t\t\t\t<Option value=\"NOK\">Nokia</Option>\n\t\t\t\t<Option value=\"TSLA\">Tesla</Option>\n\t\t\t</Select>\n\t\t\t<div style={{width: '100%', height: '400px'}}>\n\t\t\t\t<ResponsiveContainer>\n\t\t\t\t\t<LineChart\n\t\t\t\t\t\tdata={data}\n\t\t\t\t\t\tmargin={{top: 5, right: 30, left: 20, bottom: 5}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<CartesianGrid strokeDasharray=\"3 3\" />\n\t\t\t\t\t\t<XAxis dataKey=\"date\" />\n\t\t\t\t\t\t<YAxis domain={['dataMin', 'dataMax']}/>\n\t\t\t\t\t\t<Tooltip />\n\t\t\t\t\t\t<Legend />\n\t\t\t\t\t\t<Line type=\"monotone\" dataKey=\"open\" stroke=\"#8884d8\" activeDot={{r:8}}/>\n\t\t\t\t\t\t<Line type=\"monotone\" dataKey=\"close\" stroke=\"#82ca9d\" />\n\t\t\t\t\t\t<Line type=\"monotone\" dataKey=\"high\" stroke=\"#ff0000\" />\n\t\t\t\t\t</LineChart>\n\t\t\t\t</ResponsiveContainer>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}